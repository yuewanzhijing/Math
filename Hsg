import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
import random
from collections import deque

# 初始化Dash应用
app = dash.Dash(__name__)

# 初始化数据
X = deque(maxlen=20)
Y = deque(maxlen=20)
X.append(0)
Y.append(1)

# 定义应用布局
app.layout = html.Div(
    [
        dcc.Graph(id="live-graph", animate=True),
        dcc.Interval(
            id="graph-update",
            interval=1000,  # 更新间隔为1000毫秒（1秒）
            n_intervals=0,
        ),
        html.Div(id="number-display-1", style={'fontSize': 24, 'marginTop': 20}),
        html.Div(id="number-display-2", style={'fontSize': 24, 'marginTop': 20}),
    ]
)

# 定义回调函数来更新图表和数字
@app.callback(
    [Output("live-graph", "figure"),
     Output("number-display-1", "children"),
     Output("number-display-2", "children")],
    [Input("graph-update", "n_intervals")]
)
def update_graph_and_numbers(n):
    # 更新数据
    X.append(X[-1] + 1)
    Y.append(Y[-1] + (random.uniform(-0.1, 0.1)))  # 随机变化的数据

    # 创建图表
    data = go.Scatter(
        x=list(X),
        y=list(Y),
        mode="lines+markers",
    )

    # 生成随机数字或计算的数字
    number1 = round(random.uniform(0, 100), 2)
    number2 = round(random.uniform(0, 100), 2)

    # 返回图表和数字的更新内容
    return {
        "data": [data],
        "layout": go.Layout(
            xaxis=dict(range=[min(X), max(X)]),
            yaxis=dict(range=[min(Y), max(Y)]),
        ),
    }, f"Number 1: {number1}", f"Number 2: {number2}"

if __name__ == "__main__":
    app.run_server(debug=True)
